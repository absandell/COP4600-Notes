>>>>>   1.5 - 1.8 Notes   <<<<<
________________________________

====================================================
1.5.1: Processes
====================================================

Process:
- Program in execution
- Each process is associated with an address space
- Each process is associated with a set of resources
  > Registers
  > List of open files
  > Oustanding alarms
  > List of related processes
  > All info needed to run the program
- * Processes are containers that hold all information needed to run a program *

Address Space:
- A list of memory locations from 0 to some maximum, which the process can read and write
- Contains the executable program, the program's data, and its stack

Process Table:
- Array of structures, containing all information about suspended processes, with one for each process in existence

Suspended Process consists of:
- Address space (core image)
- Process table entry (to later restart)

Alarm Signal
- Used to suspend process to run run a signal-handling procedure to retransmit signal-handling

UID:
- Assigned to everyone authorized to use system
- Each process is associated with the UID of the person who started it


====================================================
1.5.2: Address Spaces
====================================================

What happens if a process has more address space than computer has main memory?
- Operating system uses virual memory: keeps part of address space in main memory and part on disk.
- Address space is decoupled from the machine's physical memory and can be larger or smaller than physical memory as a result


====================================================
1.5.3: Files
====================================================

PC Operating Systems use directories to group files together

Process and file hierarchies are both organized as trees

Before a file can be read or written:
- It must be opened, at which time the file permissions are checked
- If access is permitted, the system returns a small integer called a "file descriptor" to use is subsequent operations
- If access is prohibited, an error code is returned

Special File:
- Only in Unix
- Used to make I/O devices look like files
- They can be read and written using the same system calls as are used for reading and writing files
- Two kinds of special files:

  1.) Block Special Files:
    > Used to model devices that consist of a collection of randomly addressable blocks, such as disks
	> By reading block 4, can access fourth block on device
	
  2.) Character Special Files:
	> Used to model printers, modems, and other devices that accept or output a character stream.
	
- Special files are kept in the /dev directory

Pipe:
- A pseudofile used to connect two processes

          (Pipe)
    (A)============(B)

- If process A wants to send data to process B:
  > A writes on the pipe as if it was an output file
  > B reads from the pipe as if it was an input file


====================================================
1.5.4: Input/Output
====================================================

Every operating system has an I/O subsystem for managing its I/O devices

Some of the I/O software is device independent, others, like device drivers, and specific to particular I/O devices


====================================================
1.5.5: Protection
====================================================

Protection in UNIX:
- Files in UNIX are protected by assigning each one a 9-bit binary protection code
- Protection code consists of 3-bit fields
  > 1 for Owner
  > 1 for other members of owner's group
  > 1 for everyone else
- 3 bits are known as rwx bits
  > r = read
  > w = write
  > x = execute
- Ex.) rwxr-x--x
  > Owner: Can read, write, execute
  > Group: Can read, execute
  > Everyone: Can execute


====================================================
1.5.6: The Shell
====================================================

The Shell:
- UNIX command interpeter
- Not a part of the operating system, but makes heavy use of the operating system features
- Original Shell = sh


Essential Operators:
- ' > ': Used to redirect output to a file
  > Ex.) date > file (Sends output of date to file)
  
- ' < ': Used to take input from a file
  > Ex.) sort < file1 > file2 (Takes input from file 1, sorts, then sends output to file2)
  
- ' | ': Used to take output from one program and use as input for another
  > Ex.) cat file1 file2 file3 | sort >/dev/lp (Concatonates file1, file2, and file3, then sends output of sort to /dev/lp)
  
  
====================================================
1.5.7: Ontogeny Recapitulates Phylogeny
====================================================

Saying comes from German zoologist Ernst Haeckel
- Means that the development of an embryo repeats the evolution of the species
- Simplification, but has slight kernel of truth
- In computing, each new 'species' experiences the same cycles of development and evolution that it's ancestors did

Large Memories:
- First mainframes had limited memory (~128 KB for IBM 7090/7094)
- IBM 7090/7094 was written in assembly to preserve memory
- When first commercial minicomputer (PDP-1) was released, had 4096 18-bit words of memory
- In 80s minicomputers had 4 KB memory and used assembly before later innovations allowed for development in C
- Smart cards have Java interpreter and do not require smart card's machine language

Protection Hardware:
- Early mainframes had no protection hardware, so they ran one program at a time
- With IBM 360, primitive form of hardware protection was available

Disks:
- Early mainframes were largely magnetic-tape based
- Would read in program from tame, compile, run, and write results to another tape
- This changed when IBM introduced the first hard disk RAMAC in 1956

Virtual Memory:
- Gives ability to run programs larger than the machine's physical memory by rapidly moving pieces back and forth between RAM and disk
- First appeared in mainframes, then minis, and finally micros


====================================================
1.6: System Calls
====================================================

Any single-CPU computer can execute only one instruction at a time
- If a process is running a user program in user mode and needs a system service, such as reading data from a file,
  it has to execute a trap instruction to transfer control to the operating system.
- The operating system then figures out what the calling process wants by inspecting the parameters
- Operating system then carries out system call and returns control to the instruction following the system call. 
- In a sense, a system call is like making a special procedure call, only system calls enter the kernel and procedure calls do not


read system call:
- Has three paramaters:
  1.) Specifying file
  2.) Pointing to buffer
  3.) Number of bytes to read
- Ex.) count = read(fd, buffer, nbytes);
  > If system call cannot be carried out, count is set to -1, and error number is put in global var errno
  
TRAP Instruction:
- Used to switch from user mode to kernel mode and start execution at a fixed address within the kernel
- Different from procedure-call instruction in two fundamental ways:
  1.) Switches into kernel mode. Procedure call does not change the mode.
  2.) TRAP instruction cannot jump to an arbitrary address. It either jumps to a single fixed location, or there is an
      8-bit field in the instruction giving the index into a table in memory containing jump addresses. Depends on architecture.
	  
System Call Steps
-------------------
  {User Program}
  1.) Push nbytes
  2.) Push &buffer
  3.) Push fd
  4.) Call read
  
  {Library Procedure Read}
  5.) Put code for read in register
  6.) TRAP to the kernel
  
  {KERNEL}
  7.) Dispatches to correct system-call number via a table of pointers
  8.) System call handler runs
  9.) Returns to after TRAP
  
  {Library Procedure Read}
  10.) Returns to user program
  
  {User Program}
  11.) Increment stack pointer (because stack grows downwards)
  
  
====================================================
1.6.1: System Calls for Process Management
====================================================
  
Fork:
- The only way to create a new process in POSIX
- Creates exact duplicate of the original process
- Changes in parent and child process do not affect one another
- Child fork call is 0, parents is PID of child
  
cp:
- Used to copy files
- main(argc, argv, envp)
  > argc = number of items in command line
  > argv = pointer to an array
  > envp = pointer to the environment
  
Processes in UNIX have their memory divided into three segments
  1.) Text segment (The program code)
  2.) Data segment (The variables)
    > Grows upward
  3.) Stack segment
    > Grows downwards
	
  - Between 2 and 3, is a gap of unused address space. Stack grows into this space as needed, but data segment expands using brk system call
  
  
====================================================
1.6.2: System Calls for File Management
====================================================
 
To read or write a file it must first be opened:
- This call specifies a file name, either an absolute path or relative to working directory, as well as a code of:
  1.) O_RDONLY
  2.) O_WRONLY
  3.) O_RDWR
  
  These mean: 'Read Only', 'Write Only', or 'Both'

- To create a new file, the O_CREAT paramater is used

Each file has an associated pointer that indicates the current position in the file.
- Usually points to the next byte to be read (written)
- lseek call changes the value of the position pointer, so that subsequent calls to read or write can begin anywhere in the file

Lseek:
- Has three parameters
  1.) File descriptor
  2.) File position
  3.) File position relative to beginning of the file, current position, or end of file
  
- Value returned is the absolute position in the file (in bytes) after changing the pointer

UNIX keeps track of:
  1.) File mode
  2.) File size
  3.) Time of last modification
  4.) Other related information
  
- Information is viewable via the stat system call. Use fstat for open files


====================================================
1.6.3: System Calls for Directory Management
====================================================

mkdir: Creates empty directories
rmdir: Removes empty directories
link: Allows file to appear under 2+ names, even in different directories
unlink: Unlinks file
mount: Allows two file systems to be merged into one
- Think USB folder/file tree being mounted onto existing file tree


====================================================
1.6.4: Miscellaneous System Calls
====================================================

chdir: Changes the current working directory
chmod: Changes mode of a file to edit RWX permissions
kill: Used by users and user processes to send signals. If process is not prepared to handle a signal, its arrival kills the process
POSIX: Defines a number of procedures for dealing with time
- In 2106, 32-bit UNIX systems will go berserk as 2^32 seconds corresponds to ~136 years. Similar to Y2K


====================================================
1.6.5: The Windows Win32 API
====================================================

UNIX consists of code that makes system calls to perform services

Windows  is normally event driven
- Main program waits for some event to happen, then calls a procedure to handle it
  > This includes key presses, mouse movements, USB insertion, etc.
- Handlers are called to process event, update the screen, and update the internal program state

1-1 Relationship between UNIX system calls and Windows library procedures used to invoke system calls

** Large list of Win32 API calls vs Linux (pg. 62) **

Win32 is not the most uniform or consistent interface due to it's need to be backwards compatible with the previous 16-bit interface of Windows 3.x


====================================================
1.7: Operating System Structure
====================================================

Six different structures that have been tried
  1.) Monolithic systems
  2.) Layered systems
  3.) Microkernels
  4.) Client-server systems
  5.) Virtual machines
  6.) Exokernels
  

====================================================
1.7.1: Monolithic Systems
====================================================

This is the most common organization of the system

Operating systems runs as a single program in kernel mode
- OS is written as a collection of procedures, linked together into a single large executable binary program
- Each procedure in system is free to call any other
- A crash in any procedure will take down entire OS

Steps to compile actual object program of the Operating System:
  1.) Compiles all the individual processes
  2.) Binds all processes together into a single executable using system linker
  
Monolithic provides basic structure for Operating System:
  1.) A main program that invokes the requested service procedure
  2.) A set of service procedures that carry out the system calls
  3.) A set of utility procedures that help the service procedures
  
For each system call, there is one service procedure that takes care of it and executes it

Utility procedures do things that are needed by several service procedures, such as fetching data from user programs

Loadable extensions such as I/O device drivers, and file systems are loaded on demand:
- UNIX: 'Shared Libraries'
- Windows: 'DLLs' or 'Dynamic-Link-Libraries'


====================================================
1.7.2: Layered Systems
====================================================



